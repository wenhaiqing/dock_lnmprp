<?php
/**
 * Created by PhpStorm.
 * User: <243083741@qq.com>
 * Date: 2019/7/24
 * Time: 22:16
 */

namespace App\HttpController;


use App\HttpController\Jwt\AccessToken;
use EasySwoole\EasySwoole\Config;
use EasySwoole\Http\AbstractInterface\Controller;
use EasySwoole\Http\Message\Status;
use EasySwoole\EasySwoole\Trigger;

class Base extends Controller
{
    function index()
    {
        // TODO: Implement index() method.
	    $this->actionNotFound('index');
    }

	/**
	 * 重写onRequest，检查action是否需要登录权限
	 * @param string|null $action
	 * @return bool|null
	 */
	protected function onRequest(?string $action): ?bool
	{
		//中间件验证token
		$allow = ['login','register','getCode'];
		if (!in_array($action,$allow)){

			$header = $this->request()->getHeaders();
			if (empty($header['authorization'])) {
				$this->writeJson(Status::CODE_BAD_REQUEST, ['errorCode' => 1, 'data' => []], 'token不存在');
				return false;
			}
			$access_token = new AccessToken();
			$token = $access_token->getRequestTokenString($header);
			if ($token){
				$res = $access_token->checkAccessToken($token[0]);
				if (!$res){
					$this->writeJson(1001,'验证失败',false);
					return false;
				}
			}

		}
		return true;
	}

	/**
	 * 记录错误日志
	 * @param \Throwable $throwable
	 */
	protected function onException(\Throwable $throwable): void
	{
		//拦截错误进日志,使控制器继续运行
		Trigger::getInstance()->throwable($throwable);
		$this->writeJson(Status::CODE_INTERNAL_SERVER_ERROR, null, $throwable->getMessage());
	}

	/**
	 * 获取配置值
	 * @param $name
	 * @param null $default
	 * @return array|mixed|null
	 */
	public function cfgValue($name,$default = null)
	{
		$value = Config::getInstance()->getConf($name);
		return $value ?? null;
    }

    protected function writeJson($statusCode = 200, $msg = null,$result = null,$access_token=null)
    {
	    // TODO: Change the autogenerated stub
	    if (!$this->response()->isEndResponse()) {
		    $data = Array(
			    "code" => $statusCode,
			    "msg" => $msg,
			    "result" => $result,
		    );
		    $this->response()->write(json_encode($data, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES));
		    $this->response()->withHeader('Content-type', 'application/json;charset=utf-8');
		    $this->response()->withStatus($statusCode);
		    $this->response()->setCookie('access_token',$access_token);
		    return true;
	    } else {
		    return false;
	    }
    }

	public function getUserId()
	{
		$header = $this->request()->getHeaders();
		$token = AccessToken::getInstance()->getRequestTokenString($header);
		if (!is_array($token)){
			return false;
		}
		$user = AccessToken::getInstance()->decode($token[0]);
		if (is_array($user)){
			return $user['sub'];
		}

	}

}